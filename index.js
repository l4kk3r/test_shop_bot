const TelegramBot = require('node-telegram-bot-api')
const { TELEGRAM_TOKEN } = require('./secret')

// SETUP
const bot = new TelegramBot(TELEGRAM_TOKEN, {polling: true})

// KEYBOARDS
const main_menu_keyboard = [['üì¶ –¢–æ–≤–∞—Ä—ã']]

// ARRAYS
let users = []
let notify_users = []

// DATABASE
data = {
    users: [

    ],
    products: [
        {
            id: 1,
            label: '–ú–∞–Ω–≥–æ',
            price: 299,
            description: '–û—á–µ–Ω—å –≤–∫—É—Å–Ω–æ–µ –±—Ä–∞–∑–∏–ª—å—Å–∫–æ–µ –º–∞–Ω–≥–æ!'
        },
        {
            id: 2,
            label: '–Ø–±–ª–æ–∫–æ –ì–æ–ª–¥–µ–Ω',
            price: 69,
            description: '–Ø–±–ª–æ–∫–æ —Å –Ω–∞—à–µ–π –≥—Ä—è–¥–∫–∏!'
        }
    ],
    orders: [

    ]
}

// BOT LOGIC
bot.onText(/\/start/, (msg, match) => {
    const chatId = msg.from.id;
    const resp = match[1]; // the captured "whatever"
    if (!users.includes(chatId)) {
        users.push(chatId)
        data.users.push({
            id: data.users.length,
            telegram_id: chatId,
            cart: []
        })
    }
    bot.sendMessage(chatId, 'üëã–ü—Ä–∏–≤–µ—Ç! –Ø –ª—É—á—à–∏–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω', { reply_markup: { "keyboard": main_menu_keyboard, "resize_keyboard": true }});
});

bot.on('message', (msg) => {
    const user_id = msg.chat.id
    const message_text = msg.text

    if (!users.includes(user_id)) {
        users.push(user_id)
        data.users.push({
            id: data.users.length,
            telegram_id: user_id,
            cart: []
        })
    }

    if (message_text.toLowerCase() === 'üì¶ —Ç–æ–≤–∞—Ä—ã') {
        data.products.forEach(product => {
            bot.sendMessage(user_id, `<b>–¢–æ–≤–∞—Ä: </b>${product.label}\n<b>–¶–µ–Ω–∞: </b>${product.price}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ: </b>${product.description}`, {parse_mode: "HTML", reply_markup: {
                inline_keyboard: [
                    [
                      {
                        text: '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
                        callback_data: `add_tocart_${product.id}`
                      }, 
                      {
                          text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É',
                          callback_data: 'go_tocart'
                      }
                    ]
                  ]
            }})
        })
    }

});

bot.on('callback_query', function (msg) {
    const message_text = msg.data
    const user_id = users.indexOf(msg.from.id)


	if (message_text.includes('add_tocart')) {

        // –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
        const product_id = Number(message_text.replace('add_tocart_', ''))
        const product = data.products[product_id - 1]
        data.users[user_id].cart.push(product)
        bot.answerCallbackQuery(msg.id, {text: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', show_alert: false})

    } else if (message_text.includes('go_tocart')) {

        const cart = data.users[user_id].cart

        if (cart.length === 0) {
            bot.sendMessage(msg.from.id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
            bot.answerCallbackQuery(msg.id)
        } else {
            let cart_message = `<b>–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ ${cart.length} —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n`
            cart.forEach(item => {
                cart_message = cart_message + `${item.label} - ${item.price}\n-----------------\n`
            })
            bot.sendMessage(msg.from.id, cart_message, {parse_mode: "HTML", reply_markup: {
                inline_keyboard: [
                    [
                      {
                        text: '‚úÖ–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: 'cart_order'
                      },
                      {
                          text: 'üóëÔ∏è–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
                          callback_data: 'cart_clean'
                      }
                    ]
                  ]
            }})
            bot.answerCallbackQuery(msg.id)
        }
    } else if (message_text.includes('cart_clean')) {
        data.users[user_id].cart = []
        bot.answerCallbackQuery(msg.id, {text: '–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞', show_alert: false})
    } else if (message_text.includes('cart_order')) {

        const cart = data.users[user_id].cart

        if (cart.length === 0) {
            // –µ—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
            bot.sendMessage(msg.from.id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
            bot.answerCallbackQuery(msg.id)
        } else {
            // —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
            let cart_message = `<b>–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ ${cart.length} —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n`
            cart.forEach(item => {
                cart_message = cart_message + `${item.label} - ${item.price}\n-----------------\n`
            })
            bot.sendMessage(msg.from.id, cart_message, {parse_mode: "HTML", reply_markup: {
                inline_keyboard: [
                    [
                      {
                        text: '–û–ø–ª–∞—Ç–∏–ª(–∞)',
                        callback_data: 'cart_payed'
                      }
                    ]
                  ]
            }})
            bot.answerCallbackQuery(msg.id)
        }
    } else if (message_text.includes('cart_payed')) {
        const cart = data.users[user_id].cart

        data.orders.push(`–ó–∞–∫–∞–∑ ‚Ññ ${data.users[user_id].cart.length}\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${data.users[user_id].id}\n–ó–∞–∫–∞–∑:\n${data.users[user_id].cart}`)
        data.users[user_id].cart = []
        bot.sendMessage(msg.from.id, 'ü•≥–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!')
        // —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ
        let cart_message = ``
        cart.forEach(item => {
            cart_message = cart_message + `${item.label} - ${item.price}\n-----------------\n`
        })
        notify_users.forEach(user => {
            bot.sendMessage(user, `ü•≥–ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n${cart_message}`)
        }) 
        // –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ query
        bot.answerCallbackQuery(msg.id)
    }
});

// ADMIN BOT LOGIC
// —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –ø—Ä–∏–º–µ—Ä: "/create_new –ü—Ä–æ–¥—É–∫—Ç;–¶–µ–Ω–∞;–û–ø–∏—Å–∞–Ω–∏–µ"
bot.onText(/\/create_new (.+)/, (msg, match) => {
    const [label, price, description] = match[1].split(';')
    data.products.push({
        id: data.products.length + 1,
        label,
        price,description
    })
    bot.sendMessage(msg.from.id, 'üì¶–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
});

// –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
bot.onText(/\/recieve_payments/, (msg, match) => {
    notify_users.push(msg.from.id)
    bot.sendMessage(msg.from.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
});